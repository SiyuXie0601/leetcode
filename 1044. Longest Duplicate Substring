class Solution {
    public String longestDupSubstring(String S) {
        int left = 0, right = S.length()+1;
        int[] nums = new int[S.length()];
        for(int i = 0; i < S.length(); ++i) nums[i] = (int)S.charAt(i) - (int)'a';
        long modulus = (long)Math.pow(2, 32);
        int length = 1;
        while(left < right){
            int mid = left + (right - left) / 2;
            //System.out.println("mid = " + mid);
            if(findDuplicatedString(mid, nums, modulus) == -1){
                System.out.println("------------------");
                System.out.println(left);
                System.out.println(mid);
                System.out.println(right);
                System.out.println("------------------");
                right = mid;
            }
            else{
                System.out.println("------------------");
                System.out.println(left);
                System.out.println(mid);
                System.out.println(right);
                System.out.println("------------------");
                length = Math.max(length, mid);
                left = mid+1;
            }
        }
        if(left == 0) return "";
        System.out.println(length);
        int start = findDuplicatedString(left-1, nums, modulus);
        //System.out.println(start);
        //System.out.println(left);
        return S.substring(start, start + left-1);
    }
    private int findDuplicatedString(int L, int[] nums, long modulus){
        if(L == 0) return -1;
        long code = 0, al = 1;
        HashSet<Long> set = new HashSet<>();
        for(int i = 0; i < L; i++){
            code = (code * 26 + nums[i]) % modulus;
            al *= 26;
        }
        //System.out.println(code);
        set.add(code);
        for(int i = L; i < nums.length; i++){
            code = (code * 26 - nums[i-L] * al % modulus + modulus ) % modulus;
            code = (code + nums[i]) % modulus;
            if(set.contains(code)) return i - L + 1;
            //System.out.println(code);
            set.add(code);
        }
        //System.out.println("------------------");
        return -1;
    }
}
//find maximum longest substring, using binary search
//rolling hash could reduce findDuplicatedString to o(n) while regular hash is o(Ln)