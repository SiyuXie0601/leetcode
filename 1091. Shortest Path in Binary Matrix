class Solution {
    private int[][] directions = new int[][]{{0, 1}, {0, -1}, {1, 0}, {-1, 0}, {1, 1}, {-1, -1}, {-1, 1}, {1, -1}};
    public int shortestPathBinaryMatrix(int[][] grid) {
        LinkedList<int[]> queue = new LinkedList<>();
        if(grid[0][0] == 0) queue.offer(new int[]{0, 0});
        int N = grid.length;
        boolean[][] visited = new boolean[N][N];
        int dis = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                int[] cur = queue.poll();
                if(cur[0] == N - 1 && cur[1] == N - 1)
                    return dis+1;
                for(int j = 0; j < directions.length; j++){
                    int newx = cur[0] + directions[j][0];
                    int newy = cur[1] + directions[j][1];
                    if(newx < 0 || newx >= N || newy < 0 || newy >= N || visited[newx][newy] == true || grid[newx][newy] == 1)
                        continue;
                    queue.offer(new int[]{newx, newy});
                    visited[newx][newy] = true;
                }
            }
            dis++;
        }
        return -1;
    }
}
//update visited array before poll from queue