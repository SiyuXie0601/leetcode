class Solution {
    private int[][] directions = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public int cutOffTree(List<List<Integer>> forest) {
        int row = forest.size(), col = forest.get(0).size();
        PriorityQueue<int[]> pq = new PriorityQueue<>((int[] a, int[] b) -> a[2] - b[2]);
        for(int i = 0; i < row; i++){
            for(int j = 0; j < col; j++){
                if(forest.get(i).get(j) > 1)
                    pq.offer(new int[]{i, j, forest.get(i).get(j)});
            }
        }
        int[] start = new int[]{0, 0};
        int steps = 0;
        while(pq.size() > 0){
            int[] next = pq.poll();
            int[] end = new int[]{next[0], next[1]};
            int step = DFS(forest, start, end);
            if(step == -1) return -1;
            steps += step;
            start = end;
        }
        return steps;
    }
    private int DFS(List<List<Integer>> forest, int[] start, int[] end){
        //System.out.println("---------------------");
        //System.out.println(start[0] + " " + start[1]);
        //System.out.println(end[0] + " " + end[1]);
        int row = forest.size(), col = forest.get(0).size();
        boolean[][] visited = new boolean[row][col];
        LinkedList<int[]> queue = new LinkedList<>();
        queue.offer(start);
        visited[start[0]][start[1]] = true;
        int step = 0;
        while(queue.size() != 0){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                int[] cur = queue.poll();
                //System.out.println(cur[0] + " " + cur[1]);
                if(cur[0] == end[0] && cur[1] == end[1]){return step;}
                for(int j = 0; j < directions.length; j++){
                    int newx = cur[0] + directions[j][0];
                    int newy = cur[1] + directions[j][1];
                    //System.out.println(newx + " " + newy);
                    if(newx < 0 || newx >= row || newy < 0 || newy >= col || visited[newx][newy] == true || forest.get(newx).get(newy) == 0)
                        continue;
                    visited[newx][newy] = true;
                    queue.offer(new int[]{newx, newy});
                }
            }
            step++;
        }
        return -1;
    }
}
//use priorityqueue to get next higher tree
//use dfs to find the dis between cur tree and next higher tree