class Solution {
    class Pair{
        String str;
        int count;
        Pair(String str, int count){
            this.str = str;
            this.count = count;
        }
    }
    public List<String> topKFrequent(String[] words, int k) {
        PriorityQueue<Pair> pq = new PriorityQueue<Pair>((Pair a, Pair b) -> {
            if(a.count == b.count) return a.str.compareTo(b.str);
            else return b.count - a.count;
        });
        HashMap<String, Integer> map = new HashMap<>();
        for(String word : words){
            map.put(word, map.getOrDefault(word, 0) + 1);
        }
        for(Map.Entry<String, Integer> entry : map.entrySet()){
            pq.offer(new Pair(entry.getKey(), entry.getValue()));
        }
        List<String> list = new LinkedList<>();
        for(int i = 0; i < k; i++)
            list.add(pq.poll().str);
        return list;
    }
}
// PriorityQueue