class SnakeGame {

    /** Initialize your data structure here.
        @param width - screen width
        @param height - screen height 
        @param food - A list of food positions
        E.g food = [[1,1], [1,0]] means the first food is positioned at [1,1], the second is at [1,0]. */
    private HashSet<Integer> set;
    private LinkedList<int[]> queue;
    private int count, width, height;
    private int[][] food;
    public SnakeGame(int width, int height, int[][] food) {
        this.width = width;
        this.height = height;
        this.food = food;
        count = 0;
        set = new HashSet<>();
        queue = new LinkedList<>();
        set.add(0);
        queue.offer(new int[]{0, 0});
    }
    
    /** Moves the snake.
        @param direction - 'U' = Up, 'L' = Left, 'R' = Right, 'D' = Down 
        @return The game's score after the move. Return -1 if game over. 
        Game over when snake crosses the screen boundary or bites its body. */
    public int move(String direction) {
        int[] head = queue.get(0);
        int[] newhead = new int[]{head[0], head[1]};
        if(direction.equals("U")) newhead[0] -= 1;
        if(direction.equals("D")) newhead[0] += 1;
        if(direction.equals("R")) newhead[1] += 1;
        if(direction.equals("L")) newhead[1] -= 1;
        //System.out.println(newhead[0] + " " + newhead[1]);
        //printSet();
        int[] tail = queue.removeLast();
            //print();
        set.remove(tail[0] * width + tail[1]);
        if(newhead[0] < 0 || newhead[0] >= height || newhead[1] < 0 || newhead[1] >= width || set.contains(newhead[0] * width + newhead[1])) return -1;
        set.add(newhead[0] * width + newhead[1]);
        queue.addFirst(newhead);
        if(count < food.length && food[count][0] == newhead[0] && food[count][1] == newhead[1]){
            count++;
            queue.addLast(tail);
            set.add(tail[0] * width + tail[1]);
        }
        return count;
    }
    private void print(){
        for(int i = 0; i < queue.size(); i++)
            System.out.print("(" + queue.get(i)[0] + "," + queue.get(i)[1] + ") ");
        System.out.println();
    }
    private void printSet(){
        for(int element : set)
            System.out.print(element + " ");
        System.out.println();
    }
}
//find an element in constant time: HashSet
//remove last one || get first one: LinkedList
//set contains check whether the object is in the set, not the content