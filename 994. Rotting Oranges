class Solution {
    private int[][] directions = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    public int orangesRotting(int[][] grid) {
        int total = 0;
        LinkedList<int[]> queue = new LinkedList<>();
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1) total++;
                if(grid[i][j] == 2) queue.offer(new int[]{i, j});
            }
        }
        if(total == 0) return 0;
        int min = -1, count = 0;
        while(!queue.isEmpty()){
            int size = queue.size();
            for(int i = 0; i < size; i++){
                int[] pos = queue.poll();
                for(int j = 0; j < 4; j++){
                    int newx = pos[0] + directions[j][0];
                    int newy = pos[1] + directions[j][1];
                    if(newx < 0 || newx >= grid.length || newy < 0 || newy >= grid[0].length || grid[newx][newy] != 1)
                        continue;
                    grid[newx][newy] = 2;
                    count++;
                    queue.add(new int[]{newx, newy});
                }
            }
            min++;
        }
        return count == total ? min : -1;
    }
}
//bfs