class Solution {
    private boolean[][] visited;
    private HashSet<String> set;
    private int[][] directions = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    private char[] chars = new char[]{'D', 'U', 'L', 'R'};
    private int count;
    public int numDistinctIslands(int[][] grid) {
        visited = new boolean[grid.length][grid[0].length];
        set = new HashSet<>();
        count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(visited[i][j] == false && grid[i][j] == 1 ){
                    String str = DFS(grid, i, j);
                    if(!set.contains(str)) count++;
                    set.add(str);
                    //System.out.println(str);
                }
            }
        }
        return count;
    }
    private String DFS(int[][] grid, int x, int y){
        String res = "";
        for(int i = 0; i < 4; i++){
            int newx = x + directions[i][0];
            int newy = y + directions[i][1];
            if(newx < 0 || newx >= grid.length || newy < 0 || newy >= grid[0].length || visited[newx][newy] == true || grid[newx][newy] == 0)
                continue;
            visited[newx][newy] = true;
            res += chars[i];
            res += DFS(grid, newx, newy);
        }
        return res + "/";
    }
}
// return res = "" + upres + downres + leftres + rightres + "/"