class Solution {
    private List<Integer> res;
    public List<Integer> distanceK(TreeNode root, TreeNode target, int K) {
        res = new LinkedList<>();
        DFS(root, target, K);
        return res;
    }
    private int DFS(TreeNode root, TreeNode target, int K){
        if(root == null) return -1;
        if(root == target){
            findChildren(root, K, 0);
            return 0;
        }
        int left = DFS(root.left, target, K);
        int right = DFS(root.right, target, K);
        if(left != -1 && K - left - 1 > 0){
            findChildren(root.right, K - left - 1, 1);
            return left + 1;
        }
        if(right != -1 && K - right  - 1 > 0){
            findChildren(root.left, K - right - 1, 1);
            return right + 1;
        }
        if((left != -1 && K - left - 1 == 0) || (right != -1 && K - right - 1 == 0)){
            res.add(root.val);
            return -1;
        }
        return -1;
    }
    private void findChildren(TreeNode root, int K, int count){
        if(root == null) return;
        if(count == K){
            res.add(root.val);
            return;
        }
        findChildren(root.left, K, count+1);
        findChildren(root.right, K, count+1);
    }
    
}
//one function to find target number's findChildren
//dfs return the distance from cur node to target, get all the result above in each parent level