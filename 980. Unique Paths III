class Solution {
    private int res = 0;
    private int[][] directions = new int[][]{{1, 0}, {-1, 0}, {0, 1}, {0, -1}};
    //private LinkedList<int[]> list = new LinkedList<int[]>();
    public int uniquePathsIII(int[][] grid) {
        int x = 0, y = 0, count = 0;
        for(int i = 0; i < grid.length; i++){
            for(int j = 0; j < grid[0].length; j++){
                if(grid[i][j] == 1){x = i; y = j;}
                if(grid[i][j] == 0) count++;
            }
        }
        DFS(grid, x, y, 0, count, new boolean[grid.length][grid[0].length]);
        return res;
    }
    private void DFS(int[][] grid, int x, int y, int count, int total, boolean[][] visited){
        if(grid[x][y] == 2){
            if(count == total) {res++;}
            return;
        }
        for(int i = 0; i < 4; i++){
            int newx = x + directions[i][0];
            int newy = y + directions[i][1]; 
            if(newx < 0 || newx >= grid.length || newy < 0 || newy >= grid[0].length || visited[newx][newy] == true || grid[newx][newy] == 1 || grid[newx][newy] == -1) continue;
            visited[newx][newy] = true;
            //list.add(new int[]{newx, newy});
            DFS(grid, newx, newy, grid[newx][newy] == 0 ? count+1 : count, total, visited);
            visited[newx][newy] = false;
            //list.removeLast();
        }
    }
    // private void print(){
    //     for(int[] arr : list)
    //         System.out.print("(" + arr[0] + "," + arr[1] + ") ");
    //     System.out.println();
    // }
}
// visit all the elements in graph -> backtracking