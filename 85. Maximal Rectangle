class Solution {
    public int maximalRectangle(char[][] matrix) {
        int res = 0;
        if(matrix.length == 0 || matrix[0].length == 0) return 0;
        int[] graph = new int[matrix[0].length];
        for(int i = 0; i < matrix.length; i++){
            for(int j = 0; j < matrix[0].length; j++){
                if(i == 0)
                    graph[j] = matrix[i][j] == '1' ? 1 : 0;
                else
                    graph[j] = matrix[i][j] == '1' ? graph[j] + 1 : 0;
            }
            //print(graph);
            res = Math.max(res, maxArea(graph));
        }
        return res;
    }
    private int maxArea(int[] graph){
        Stack<Integer> stack = new Stack<>();
        stack.push(-1);
        int res = 0, i;
        for(i = 0; i < graph.length; i++){
            while(stack.peek() != -1 && graph[stack.peek()] > graph[i]){
                res = Math.max(graph[stack.pop()] * (i - stack.peek() - 1), res);
            }
            stack.push(i);
        }
        while(stack.peek() != -1){
            res = Math.max(graph[stack.pop()] * (i - stack.peek() -1), res);
        }
        return res;
    }
    private void print(int[] graph){
        for(int i = 0; i < graph.length; i++)
            System.out.print(graph[i] + " ");
        System.out.println();
    }
}
//change it to leetcode 84
//if stack like: 0, 1, 3
// then graph[2] > 3,
//so graph[stack.pop()] * (i - stack.peek() -1)